//
// Copyright (c) 2006,2011,2014 Apple Inc. All Rights Reserved.
//
// @APPLE_LICENSE_HEADER_START@
// 
// This file contains Original Code and/or Modifications of Original Code
// as defined in and that are subject to the Apple Public Source License
// Version 2.0 (the 'License'). You may not use this file except in
// compliance with the License. Please obtain a copy of the License at
// http://www.opensource.apple.com/apsl/ and read it before using this
// file.
// 
// The Original Code and all software distributed under the License are
// distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
// EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,
// INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.
// Please see the License for the specific language governing rights and
// limitations under the License.
// 
// @APPLE_LICENSE_HEADER_END@
//
// cshosting - Mach IPC interface for Code Signing Hosts
//
#include <mach/std_types.defs>
#include <mach/mach_types.defs>
#include "ss_types.defs"

subsystem cshosting 20000;
serverprefix cshosting_server_;
userprefix cshosting_client_;

import <securityd_client/ucsp_types.h>;


#define CSH_PORTS	requestport sport: mach_port_t; \
					replyport rport: mach_port_make_send_once_t; \
					out rcode: OSStatus


//
// Code Signing Hosting protocol.
// These routines are straightforward implementations of the hosting
// protocol, translated into MIG terms. Hosts are represented by
// Hosting Ports, whose receive rights are held by the host (whatever
// it might be).
// The hosting protocol carries no privileges and can be called by
// anyone without authentication. It's supposed to be easy to obtain a host's
// hosting port, so don't hand out any secrets in your implementation.
//
routine findGuest(CSH_PORTS; in host: SecGuestRef; in attributes: XMLBlob;
	out guest: GuestChain; out subhost: mach_port_make_send_t);
routine guestStatus(CSH_PORTS; in guest: SecGuestRef; out status: uint32);
skip;
routine identifyGuest(CSH_PORTS; in guest: SecGuestRef; out path: FilePathOut;
	out cdhash: HashDataOut; out hashLength: uint32; out attributes: XMLBlobOut);
