/*
 * Copyright (c) 2005-2007,2011,2014 Apple Inc. All Rights Reserved.
 *
 * @APPLE_LICENSE_HEADER_START@
 * 
 * This file contains Original Code and/or Modifications of Original Code
 * as defined in and that are subject to the Apple Public Source License
 * Version 2.0 (the 'License'). You may not use this file except in
 * compliance with the License. Please obtain a copy of the License at
 * http://www.opensource.apple.com/apsl/ and read it before using this
 * file.
 * 
 * The Original Code and all software distributed under the License are
 * distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
 * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,
 * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.
 * Please see the License for the specific language governing rights and
 * limitations under the License.
 * 
 * @APPLE_LICENSE_HEADER_END@
 */


/*
 * libDER.h - main header for libDER, a ROM-capable DER decoding library. 
 *
 */
 
#ifndef	_LIB_DER_H_
#define _LIB_DER_H_

#ifdef __cplusplus
extern "C" {
#endif

#include <libDER/libDER_config.h>
/*
 * Error returns generated by this library.
 */
typedef enum {
	DR_Success,
	DR_EndOfSequence,	/* end of sequence or set */
	DR_UnexpectedTag,	/* unexpected tag found while decoding */
	DR_DecodeError,		/* misc. decoding error (badly formatted DER) */
	DR_Unimplemented,	/* function not implemented in this configuration */
	DR_IncompleteSeq,	/* incomplete sequence */
	DR_ParamErr,		/* incoming parameter error */
	DR_BufOverflow		/* buffer overflow */
	/* etc. */
} DERReturn;

/* 
 * Primary representation of a block of memory.
 */
typedef struct {
	DERByte		*data;
	DERSize		length;
} DERItem;

/* 
 * The structure of a sequence during decode or encode is expressed as 
 * an array of DERItemSpecs. While decoding or encoding a sequence, 
 * each item in the sequence corresponds to one DERItemSpec.
 */
typedef struct {
	DERSize			offset;			/* offset of destination DERItem */
	DERTag			tag;			/* DER tag */
	DERShort		options;		/* DER_DEC_xxx or DER_ENC_xxx */
} DERItemSpec;

/*
 * Macro to obtain offset of a DERDecodedInfo within a struct.
 * FIXME this is going to need reworking to avoid compiler warnings
 * on 64-bit compiles. It'll work OK as long as an offset can't be larger
 * than a DERSize, but the cast from a pointer to a DERSize may 
 * provoke compiler warnings. 
 */
#define DER_OFFSET(type, field) ((DERSize)(&((type *)0)->field))

#ifdef __cplusplus
}
#endif

#endif	/* _LIB_DER_H_ */

